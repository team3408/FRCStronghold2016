/* written by the programmers of team 3408

 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 * Functions of Code:
 * 6 wheel, drop center tank drive
 * pneumatics controls for hanging
 * motor for controlling pneumatics
 * motor for loading the boulders
 * motor for boulder intake system
 */



//include libraries
#include "WPILib.h"
#include <iostream>
#include <math.h>
#include <AnalogInput.h>

using namespace std;

class Robot: public IterativeRobot
{
	//pneumatics for hanging
	DoubleSolenoid hang;

	// Update every 5milliseconds/0.005 seconds.
	const double kUpdatePeriod = 0.005;

	// Numbers of the buttons to use for triggering the solenoids.
	const int kDoubleSolenoidForward = 2;
	const int kDoubleSolenoidReverse = 4;

	//drive motors (front is 1, middle is 2, back is 3)
	CANTalon leftDrive1;
	CANTalon leftDrive2;
	CANTalon leftDrive3;
	CANTalon rightDrive1;
	CANTalon rightDrive2;
	CANTalon rightDrive3;

	//pneumatics adjustment motors
	CANTalon pneumatics1;
	CANTalon pneumatics2;

	//1 motor for loading
	CANTalon loader;

	//1 motor for spinning
	CANTalon spin;

	RobotDrive myRobot; // robot drive system
	Joystick buttonStick;
	Joystick driveStick;
	LiveWindow *lw;
	int autoLoopCounter;

public:
	Robot() :
		hang(1, 2),
		leftDrive1(1),
		leftDrive2(2),
		leftDrive3(3),
		rightDrive1(4),
		rightDrive2(5),
		rightDrive3(6),
		pneumatics1(7),
		pneumatics2(8),
		loader(9),
		spin(10),
		myRobot(0, 1),	// these must be initialized in the same order
		buttonStick(0),
		driveStick(1),
		lw(NULL),
		autoLoopCounter(0)
	{
		myRobot.SetExpiration(0.1);
	}

private:
	void RobotInit()
	{
		lw = LiveWindow::GetInstance();
	}

	void AutonomousInit()
	{
		autoLoopCounter = 0;
	}

	void AutonomousPeriodic()
	{
		loader.Set(0);
		spin.Set(0);
		leftDrive1.Set(0);
		leftDrive2.Set(0);
		leftDrive3.Set(0);
		rightDrive1.Set(0);
		rightDrive2.Set(0);
		rightDrive3.Set(0);

	}

	void TeleopInit()
	{

	}

	void TeleopPeriodic()
	{
		//pneumatics controller
		if (buttonStick.GetRawButton(kDoubleSolenoidForward)){
			hang.Set(DoubleSolenoid::kForward);
		}
		else if (buttonStick.GetRawButton(kDoubleSolenoidReverse)) {
			hang.Set(DoubleSolenoid::kReverse);
		}
		else {
			hang.Set(DoubleSolenoid::kOff);
		}


		//variables that control the speed of the motors on each side, because we are running tank drive, we only need two
		float driveLeft = driveStick.GetRawAxis(1);
		float driveRight = driveStick.GetRawAxis(3);

		//divide by 2 so that we don't go too fast.  Also allows us to enable slow and fast modes
		driveLeft = driveLeft/2;
		driveRight = driveRight/2;

		//true or false variables that allow us to change the speed when the buttons are held down
		bool slow = driveStick.GetRawButton(7);
		bool fast = driveStick.GetRawButton(8);

		//an if, else if statement that controls when the boolean buttons are pressed so that we can change the driving speeds
		if (slow){
			driveLeft = driveLeft/2;
			driveRight = driveRight/2;
		}
		else if (fast){
			driveLeft = driveLeft*2;
			driveRight = driveRight*2;
		}

		bool spinMotor = buttonStick.GetRawButton(1);
		float spinMotorValue;
		if (spinMotor) {
			spinMotorValue = 127;
		}
		else {
			spinMotorValue = 0;
		}

		float loaderValue = buttonStick.GetRawAxis(1);

		loader.Set(loaderValue);
		spin.Set(spinMotorValue);
		leftDrive1.Set(driveLeft);
		leftDrive2.Set(driveLeft);
		leftDrive3.Set(driveLeft);
		rightDrive1.Set(driveRight);
		rightDrive2.Set(driveRight);
		rightDrive3.Set(driveRight);

	}

	void TestPeriodic()
	{
		lw->Run();
	}
};

START_ROBOT_CLASS(Robot);
